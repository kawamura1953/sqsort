sqsort は、timsort よりも高速なソート関数です。　また、「安定」なソート関数です。

sqsortは大雑把にいうと、対象配列(ptr)と補助配列(ptr2)で
次のような移動(Ａ,Ｂ)を繰り返します。

   ptr2:...............  →  ptr2:332223....77787  →  ptr2:332223....77787
   ptr :357358257257237  Ａ  ptr :5555...........  Ｂ  ptr :......5555.....


sqsortの特徴は、同じキー値(県名・男女など)が現れる場合に極めて高速なことです。
さらに、qsortの改良版であるにもかかわらず、安定性と安全性があることです。
「安全性」の説明は、https://qiita.com/t-kawa/items/2bbcaf67030195ab3216 にあります。


sqsort は、timsort と同様に、O(n)の作業領域を必要とします。
昔と違いメインメモリが安価になった現在では、
多くの場合このことは問題にならないと思います。


sqsort ( 約340行 .oファイル約13500byte) は、
timsort(約1300行 .oファイル約30700byte) よりかなりコンパクトです。


従来のqsortを含めた３種類のソートを比較すると次の表のようになります。

| 　　　　 | timsort | sqsort  | 従来qsort |
| 速さ　　 |   △    |   ◎    |    ○     |
| 作業領域 |   △    |   △    |    ◎     |
| 安定性　 |   ○    |   ○    |    ×     |
| 安全性　 |   ◎    |   ○    |    ×     |
| 大きさ　 |   ×    |   ○    |    ◎     |


処理時間を測定したもの(benchmark.txt)を以下に記載します。
30行目でmy_qsortよりsqsortが少し遅くなっていますが、
これは、sqsortの「安定性」実現のために、余分な要素の移動が起きたためです。

```
----------------- benchmark.txt begin -------------------- 
 
　　キー:同値なし 要素:1万個　要素サイズ:8,20,80,1000byte 
my_qsort d=-3 e=10000 s=8 R4000 M000:000:000:0: c=136763  547054643 T=3.75   94 
sqsort   d=-3 e=10000 s=8 R4000 M120:009:018:0: c=141431  565726225 T=3.17   79 
timsort  d=-3 e=10000 s=8 R4000 M000:000:000:0: c=120391  481564348 T=5.39  135 
 
my_qsort d=-3 e=10000 s=20 R3000 M000:000:000:0: c=136748  410244182 T=4.73  158 
sqsort   d=-3 e=10000 s=20 R3000 M120:009:018:0: c=141452  424357003 T=3.09  103 
timsort  d=-3 e=10000 s=20 R3000 M000:000:000:0: c=120392  361177167 T=10.70  357 
 
my_qsort d=-3 e=10000 s=80 R3000 M000:000:000:0: c=136748  410244182 T=3.59  120 
sqsort   d=-3 e=10000 s=80 R3000 M120:009:018:0: c=141420  424261003 T=3.36  112 
timsort  d=-3 e=10000 s=80 R3000 M000:000:000:0: c=120392  361177167 T=13.97  466 
 
my_qsort d=-3 e=10000 s=1000 R600 M000:000:000:0: c=136776   82066150 T=3.53  588 
sqsort   d=-3 e=10000 s=1000 R600 M120:009:018:0: c=141441   84864835 T=1.80  300 
timsort  d=-3 e=10000 s=1000 R600 M000:000:000:0: c=120391   72234833 T=12.73 2122 
 
　キー種別:100種　要素:1万個　要素サイズ:8,20,80,1000byte 
my_qsort d=100 e=10000 s=8 R6000 M000:000:000:0: c=62894   377366851 T=2.41   40 
sqsort   d=100 e=10000 s=8 R6000 M120:009:018:0: c=62362   374173113 T=2.23   37 
timsort  d=100 e=10000 s=8 R6000 M000:000:000:0: c=103238  619433855 T=7.33  122 
 
my_qsort d=100 e=10000 s=20 R3000 M000:000:000:0: c=62889   188668276 T=2.52   84 
sqsort   d=100 e=10000 s=20 R3000 M120:009:018:0: c=62450   187352960 T=1.77   59 
timsort  d=100 e=10000 s=20 R3000 M000:000:000:0: c=103239  309717687 T=8.61  287 
 
my_qsort d=100 e=10000 s=80 R4000 M000:000:000:0: c=62897   251590917 T=2.39   60 
sqsort   d=100 e=10000 s=80 R4000 M120:009:018:0: c=62390   249561196 T=2.62   66 
timsort  d=100 e=10000 s=80 R4000 M000:000:000:0: c=103239  412959194 T=15.41  385 
 
my_qsort d=100 e=10000 s=1000 R500 M000:000:000:0: c=62849    31424752 T=2.25  450 
sqsort   d=100 e=10000 s=1000 R500 M120:009:018:0: c=62395    31197561 T=1.25  250 
timsort  d=100 e=10000 s=1000 R500 M000:000:000:0: c=103236   51618256 T=9.84 1969 
 
　　キー種別:2種　要素:1万個　要素サイズ:8,20,80,1000byte 
my_qsort d=2 e=10000 s=8 R12000 M000:000:000:0: c=15019   180239524 T=1.14   10 
sqsort   d=2 e=10000 s=8 R12000 M120:009:018:0: c=15014   180169054 T=0.98    8 
timsort  d=2 e=10000 s=8 R12000 M000:000:000:0: c=45265   543187931 T=7.87   66 
 
my_qsort d=2 e=10000 s=20 R7000 M000:000:000:0: c=15019   105139934 T=2.20   31 
sqsort   d=2 e=10000 s=20 R7000 M120:009:018:0: c=15045   105319930 T=0.95   14 
timsort  d=2 e=10000 s=20 R7000 M000:000:000:0: c=45266   316867688 T=8.09  116 
 
my_qsort d=2 e=10000 s=80 R6000 M000:000:000:0: c=15019    90119309 T=1.20   20 
sqsort   d=2 e=10000 s=80 R6000 M120:009:018:0: c=15014    90086866 T=1.77   29 
timsort  d=2 e=10000 s=80 R6000 M000:000:000:0: c=45266   271599060 T=9.34  156 
 
my_qsort d=2 e=10000 s=1000 R400 M000:000:000:0: c=15017     6007037 T=1.05  262 
sqsort   d=2 e=10000 s=1000 R400 M120:009:018:0: c=15013     6005533 T=0.80  199 
timsort  d=2 e=10000 s=1000 R400 M000:000:000:0: c=45265    18106287 T=4.03 1008 
 
 
　 キー:同値なし　百～百万要素　要素サイズ:200byte 
my_qsort d=-3 e=100 s=200 R200000 M000:000:000:0: c=644     128901530 T=1.66    1 
sqsort   d=-3 e=100 s=200 R200000 M120:009:018:0: c=691     138247053 T=1.16    1 
timsort  d=-3 e=100 s=200 R200000 M000:000:000:0: c=538     107625610 T=4.88    2 
 
my_qsort d=-3 e=1000 s=200 R14000 M000:000:000:0: c=10063   140888462 T=1.69   12 
sqsort   d=-3 e=1000 s=200 R14000 M120:009:018:0: c=10533   147473884 T=1.12    8 
timsort  d=-3 e=1000 s=200 R14000 M000:000:000:0: c=8682    121558937 T=5.38   38 
 
my_qsort d=-3 e=10000 s=200 R1000 M000:000:000:0: c=136714  136714630 T=1.59  159 
sqsort   d=-3 e=10000 s=200 R1000 M120:009:018:0: c=141392  141392037 T=1.19  119 
timsort  d=-3 e=10000 s=200 R1000 M000:000:000:0: c=120392  120392734 T=6.28  628 
 
my_qsort d=-3 e=100000 s=200 R60 M000:000:000:0: c=1728487  103709243 T=1.55 2577 
sqsort   d=-3 e=100000 s=200 R60 M120:009:018:0: c=1775712  106542755 T=1.69 2812 
timsort  d=-3 e=100000 s=200 R60 M000:000:000:0: c=1534803   92088195 T=5.03 8387 
 
my_qsort d=-3 e=1000000 s=200 R7 M000:000:000:0: c=20998368  146988581 T=2.20 31486 
sqsort   d=-3 e=1000000 s=200 R7 M120:009:018:0: c=21282968  148980778 T=2.84 40629 
timsort  d=-3 e=1000000 s=200 R7 M000:000:000:0: c=18640808  130485661 T=7.19 102671 
 
=================  benchmark.txt end  ==================== 
my_qsort：ベンチマークテスト実行の計算機上の C ライブラリの qsort 
sqsort　：今回公開した sqsort 
timsort ：https://github.com/patperry/timsort/ の timsort 
d=キー種類 e=要素数 s=要素サイズ R繰返し回数 c=比較回数/R T=処理秒数 
各行の最後の数値がソート１回あたりの処理時間(10μ秒単位)です 
 
```



sqsort のベンチマークテストの要領　１～３


１．https://github.com/kawamura1953/sqsort からファイルをダウンロードする。



２．benchmark.sh を実行する。実行結果は benchmark.txt へ書き込まれる。

　　main_prog.c は benchmark.sh の中でコンパイル・実行される。
　　これの引数と出力の説明は、「３．」に記載。
    bench-sample.txt は benchmark.txt の例です。



３．ベンチマークテストを行うプログラム　main_prog.c

簡易な「ソートの正しさ検査」を行っている。正式な「ソートの正しさ検査」は別に実施している。
main_prog.c は次のパラメータを指定して実行する。


引数１　キー値の種類を指定する 0:定数 -1:昇順 -2:降順 -3:同値なし乱数 1:乱数 d>=2:乱数%d
引数２　配列の要素数
引数３　配列の要素サイズ(byte数)(4の倍数であること)(sqsort自体は任意のbyte数で動作します)
引数４　ソートの繰り返し回数（繰り返し毎に配列の要素のキー値は異なる）
引数５　_QS_MID1 の値 (-1のときは既定値を使用)
引数６　_QS_MID2 の値 (-1のときは既定値を使用)
引数７　_QS_MID3 の値 (-1のときは既定値を使用)
引数８　比較関数の重さを調整する数値。大きいほど比較関数が重たくなる。  


main_prog.c 1回の実行で、実行結果を1行出力する。1行は13項目ある。例と意味を次に示す。

    qs9i5         d=-3         e=10000     s=8       R10000      M300:300:8:0:
　プログラム名  キー値の種類  要素の個数  サイズ   繰り返し回数　引数５～８の値

    c=130260    1302608733    a=65855     658555016    i=196115   T=19.06   191  
　平均比較回数  全比較回数  平均代入回数  全代入回数  比較＋代入  処理秒数  平均時間(10μ秒単位)

これをstdoutに出力する。（前半の６つと最後の２つはstderrにも出力する）

「 平均代入回数  全代入回数  比較＋代入 」の3項目は、全代入回数>0 のときだけ出力する。
今回は必ず「全代入回数＝0」なので、この3項目の出力はない。

